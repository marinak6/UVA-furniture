version: "3"
services:
  microservices:
    image: tp33/django
    container_name: microservices
    external_links:
      - mysql:db
    volumes:
      - ./microservices:/app
    ports:
      - "8001:8000"
    networks:
      - backend
      - service_mesh
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py loaddata fixtures/db.json && mod_wsgi-express start-server --working-directory . --reload-on-changes ./microservices/wsgi.py"

  exp:
    image: tp33/django
    container_name: exp
    networks:
      - service_mesh
      - public
    ports:
      - "8002:8000"
    volumes:
      - ./exp:/app
    command: "mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py"

  web:
    image: tp33/django
    container_name: web
    networks:
      - public
    ports:
      - "8000:8000"
    volumes:
      - ./web:/app
    command: bash -c "pip install redis && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py"

  # web2:
  #   image: tp33/django
  #   container_name: web2
  #   networks:
  #     - public
  #   ports:
  #     - "8003:8000"
  #   volumes:
  #     - ./web:/app
  #   command: bash -c "pip install redis && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py"

  kafka:
    image: spotify/kafka
    container_name: kafka
    networks:
      - batch_network
      - service_mesh
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
    hostname: kafka

  es:
    image: elasticsearch:7.4.0
    container_name: es
    environment:
      - discovery.type=single-node
    networks:
      - batch_network
      - service_mesh
    ports:
      - "9200:9200"

  batch:
    image: tp33/django
    container_name: batch
    volumes:
      - ./:/app
    networks:
      - batch_network
      - service_mesh
    depends_on:
      - kafka
      - es
    command: bash -c "python searchIndexer.py & python appendLogfile.py & python parseLogfile.py"
    restart: on-failure

  redis:
    image: redis
    container_name: redis
    networks:
      - public
    ports:
      - "6379:6379"

  haproxy:
    image: haproxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - public
    depends_on:
      - web
      - web2
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  selenium-chrome:
    image: selenium/standalone-chrome
    container_name: selenium-chrome
    networks:
      - service_mesh
      - public
    ports:
      - "4444:4444"

  selenium-test:
    image: tp33/django
    container_name: selenium-test
    networks:
      - service_mesh
    volumes:
      - ./app/selenium:/app
    command: bash -c "sleep 20 && pip install selenium==3.141.0 && python selenium_runner.py"

networks:
  backend:
  service_mesh:
  public:
  batch_network:
