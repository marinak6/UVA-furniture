version: "3"
services:
  microservices:
    image: tp33/django
    container_name: microservices
    external_links:
      - mysql:db
    volumes:
      - ./microservices:/app
    ports:
      - "8001:8000"
    networks:
      - backend
      - service_mesh
    command: bash -c "python manage.py makemigrations && python manage.py migrate && python manage.py loaddata fixtures/db.json && mod_wsgi-express start-server --working-directory . --reload-on-changes ./microservices/wsgi.py"

  exp:
    image: tp33/django
    container_name: exp
    networks:
      - service_mesh
      - public
    ports:
      - "8002:8000"
    volumes:
      - ./exp:/app
    command: "mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py"

  web:
    image: tp33/django
    container_name: web
    networks:
      - public
    ports:
      - "8000:8000"
    volumes:
      - ./web:/app
    command: bash -c "pip install redis && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py"

  web2:
    image: tp33/django
    container_name: web2
    networks:
      - public
    ports:
      - "8003:8000"
    volumes:
      - ./web:/app
    command: bash -c "pip install redis && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py"

  kafka:
    image: spotify/kafka
    container_name: kafka
    networks:
      - batch_network
      - service_mesh
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
    hostname: kafka

  es:
    image: elasticsearch:7.4.0
    container_name: es
    environment:
      - discovery.type=single-node
    networks:
      - batch_network
      - service_mesh
    ports:
      - "9200:9200"

  # batch:
  #   image: tp33/django
  #   container_name: batch
  #   volumes:
  #     - ./:/app
  #   networks:
  #     - batch_network
  #     - service_mesh
  #   depends_on:
  #     - kafka
  #     - es
  #   command: bash -c "python searchIndexer.py & python appendLogfile.py & python parseLogfile.py"
  #   restart: on-failure

  redis:
    image: redis
    container_name: redis
    networks:
      - public
    ports:
      - "6379:6379"

  # haproxy:
  #   image: haproxy
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   networks:
  #     - public
  #   depends_on:
  #     - web
  #     - web2
  #   volumes:
  #     - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
  # selenium-chrome:
  #   image: selenium/standalone-chrome
  #   container_name: selenium-chrome
  #   networks:
  #     - service_mesh
  #     - public
  #   ports:
  #     - "4444:4444"
  # selenium-test:
  #   image: tp33/django
  #   container_name: selenium-test
  #   networks:
  #     - service_mesh
  #   volumes:
  #     - ./app/selenium:/app
  #   command: bash -c "sleep 120 && pip install selenium==3.141.0 && python selenium_runner.py"
  spark-master:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.master.Master -h spark-master
    container_name: spark-master
    hostname: spark-master
    networks:
      - service_mesh
    environment:
      MASTER: spark://spark-master:7077
      SPARK_CONF_DIR: /conf
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
      - 8080:8080
    volumes:
      - ./data:/tmp/data
  spark-worker:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    container_name: spark-worker
    hostname: spark-worker
    networks:
      - service_mesh
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 512m
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
    links:
      - spark-master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8081:8081
    volumes:
      - ./data:/tmp/data

networks:
  backend:
  service_mesh:
  public:
  batch_network:
